/**
 * jQuery Validate Plugin - Simplified version for the assignment
 * Reference: https://jqueryvalidation.org/ (Modified version)
 */
(function($) {
    $.fn.validate = function(options) {
        const form = this;
        
        // Default settings
        const settings = $.extend({
            rules: {},
            messages: {},
            submitHandler: null,
            errorClass: 'error',
            validClass: 'valid',
            errorElement: 'span'
        }, options);
        
        // Validation methods
        const methods = {
            required: function(value) {
                return value.trim() !== '';
            },
            email: function(value) {
                const pattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                return pattern.test(value);
            },
            minlength: function(value, length) {
                return value.length >= length;
            },
            maxlength: function(value, length) {
                return value.length <= length;
            },
            pattern: function(value, regex) {
                return regex.test(value);
            }
        };
        
        // Handle form submission
        form.on('submit', function(e) {
            e.preventDefault();
            
            let isValid = true;
            
            // Reset errors
            $('.' + settings.errorClass).remove();
            
            // Validate each field
            $.each(settings.rules, function(field, rules) {
                const $field = $('#' + field);
                const value = $field.val();
                
                $.each(rules, function(rule, ruleValue) {
                    let valid = true;
                    
                    if (rule === 'required' && ruleValue) {
                        valid = methods.required(value);
                    } else if (rule === 'email' && ruleValue) {
                        valid = methods.email(value);
                    } else if (rule === 'minlength') {
                        valid = methods.minlength(value, ruleValue);
                    } else if (rule === 'maxlength') {
                        valid = methods.maxlength(value, ruleValue);
                    } else if (rule === 'pattern') {
                        valid = methods.pattern(value, ruleValue);
                    }
                    
                    if (!valid) {
                        isValid = false;
                        
                        // Add error message
                        const errorMsg = settings.messages[field][rule] || 'This field is invalid';
                        $('<' + settings.errorElement + '>')
                            .addClass(settings.errorClass)
                            .text(errorMsg)
                            .insertAfter($field);
                            
                        return false; // Break the inner loop
                    }
                });
            });
            
            // Call submit handler if form is valid
            if (isValid && typeof settings.submitHandler === 'function') {
                settings.submitHandler.call(form);
            }
            
            return isValid;
        });
        
        return this;
    };
})(jQuery);